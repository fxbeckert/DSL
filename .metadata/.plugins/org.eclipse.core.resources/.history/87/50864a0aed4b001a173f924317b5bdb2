/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fr.ut2j.m1ice.fsm.FSM
import fr.ut2j.m1ice.fsm.Initial
import fr.ut2j.m1ice.fsm.Final

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var fsm = resource.contents.get(0) as FSM;
		fsa.generateFile("FSM.java", generateFSM(fsm))
		fsa.generateFile("STATE.java", generateState())
		fsa.generateFile("ABSTRACTSTATE.java", generateAbstractState())
		fsa.generateFile("TRANSITION.java", generateTransition())
		
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
	}
	
	def String generateTransition() {
		return ''' public class TRANSITION {
						private StateAbstr stateStart;
						private StateAbstr stateEnd;
						private String trigger;
						
						public Transition(StateAbstr src, StateAbstr target, String trigger) {
							this.stateStart = src;
							this.stateEnd = target;
							this.trigger = trigger;
						}
						
						public StateAbstr getStateStart() { return this.stateStart; }
						public StateAbstr getStateEnd() { return this.stateEnd; }
						public String getTrigger() { return this.trigger; }
					} '''
	}
	
	def String generateFSM(FSM fsm) {
		var initState = fsm.state.filter[state | state instanceof Initial].get(0);
		var finalState = fsm.state.filter[state | state instanceof Final].get(0);
		return ''' 
		import java.util.Scanner;
		import java.util.List;
		import java.util.ArrayList;
		public class FSM {
			public void execute() {					
				List<Transition> transitions = new ArrayList<>();
				«FOR tr: fsm.transition »
				transitions.add(new Transition(new State("«tr.state1.name»"), new State("«tr.state2.name»"), "«tr.name»"));
				«ENDFOR»
				Scanner sc = new Scanner(System.in);	
				StateAbstr current = new State("«initState.name»");
				StateAbstr finalState = new State("«finalState.name»");
				System.out.println("Bonjour");
				while(!current.equals(finalState)) {
					System.out.println("Etat courant : " + current.getState());
					final StateAbstr currentState = current;
					System.out.println("Lancer la transition : ");
					String trigger = sc.nextLine(); 
					Transition transition = transitions.stream()
						.filter(tr -> tr.getStateStart().equals(currentState) && tr.getTrigger().equals(trigger)).findFirst().orElse(null);
					if (transition != null) {
						current = transition.getStateEnd();
					} else {
						System.out.println("Transition null");
					}
					System.out.println("nouveau state : " + current.getState());
				}
				System.out.println("Etat final : FIN");
			}
			public static void main(String[] args) {
				FSM fsm = new FSM();
				fsm.execute();
			}
		}'''
	}
	
	def String generateAbstractState() {
				return ''' 
		import java.util.Objects;
		
		public abstract class ABSTRACTSTATE {
					private String state;
					
					public StateAbstr(String st){
						this.state = st;}
						
					public String getState() {return this.state;}
					
					public void setState( String newSt) {this.state = newSt;}
					
					@Override
						public boolean equals(Object o) {
							if (this == o) return true;
							if (o == null || getClass() != o.getClass()) return false;
							StateAbstr that = (StateAbstr) o;
							return Objects.equals(state, that.state);
						}
					
		}'''
	}
	
	def String generateState() {
		return '''public class STATE extends StateAbstr {
					public State(String name) {
						super(name);
					}
				}'''
	}
	
}
